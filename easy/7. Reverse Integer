7. Reverse Integer
Input: 123
Output: 321

我的想法是把这个整数比如123按照取 3X10的平方（10的n-1次方，n是整数的字符串长度，）+2X10的n-2次方+1X10的n-n次方 相加这样就能得到这个证书的相反了，可是算的时候，调试失败了很多次，比如没有考虑overflow的问题
比如2134534349 还是一个整数，可是反过来的话，就不是整数了，而是long型 等等
最后code如下

class Solution {
    public int reverse(int x) {
        long result = 0;
        if (x>=Integer.MAX_VALUE || x<=Integer.MIN_VALUE)
        {
            return 0;
        }
        
        int len = String.valueOf(Math.abs(x)).length();
        int base = 0;
        
        for (int i=len-1;i>=0;i--)
        {
            base = (int)(x/Math.pow(10,i));
            result = result + (long)(base*Math.pow(10,len-1-i));
            if (result>=Integer.MAX_VALUE || result<=Integer.MIN_VALUE)
            {
                return 0;
            }
            x = x-(int)(base*Math.pow(10,i));
        }
        
        return (int)result;
        
    }
}

最后看答案其实有更简单的做法，不是乘，而是除，我的做法是从前向后，其实从后向前更简单，比如

public int reverse(int x)
{
    int result = 0;

    while (x != 0)
    {
        int tail = x % 10;
        int newResult = result * 10 + tail;
        if ((newResult - tail) / 10 != result)//这个是为了防止overflow
        { return 0; }
        result = newResult;
        x = x / 10;
    }

    return result;
}